package object AcaCustom
{
    import Chisel._
    import Node._
    import Sodor.Constants._
    import Common._

    class DCacheInterface()(implicit conf: SodorConfiguration) extends Module
    {
        val io = new Bundle {
            val core_port = (new MemPortIo(data_width=conf.xprlen)).flip
            val mem_port = new MemPortIo(data_width=conf.xprlen)
        }
    }

    class NoDCache()(implicit conf: SodorConfiguration) extends DCacheInterface
    {
        io.mem_port <> io.core_port
    }

    class NoDCache2()(implicit conf: SodorConfiguration) extends DCacheInterface
    {
        // Extract desired data from burst
        val burst_len = 64    // 64 byte per line
        val burst_len_bit = 6 // 2^6 = 64
        val word_len = 4      // 4 byte per word
        val word_len_bit = 2  // 2^2 = 4

        val req_valid      = io.core_port.req.valid
        val req_addr       = io.core_port.req.bits.addr
        val req_data       = io.core_port.req.bits.data
        val req_fcn        = io.core_port.req.bits.fcn
        val req_typ        = io.core_port.req.bits.typ
        
        val req_valid_reg      = Reg(Bool())
        val req_addr_reg       = Reg(Bits())
        val req_data_reg       = Reg(Bits())         
        val req_fcn_reg        = Reg(Bits())
        val req_typ_reg        = Reg(Bits())
        val index_reg          = Reg(Bits())
        
        val burst_data     = io.mem_port.resp.bits.burst_data
        val word_idx_in_burst = req_addr(burst_len_bit - 1, word_len_bit)
        val word_data_ori = 
            Mux1H(UIntToOH(word_idx_in_burst, width=(burst_len / word_len)), burst_data)

        val byte_idx_in_word = req_addr(word_len_bit - 1, 0)
        val read_data_ori = 
          LoadDataGen(word_data_ori >> (byte_idx_in_word << 3), io.core_port.req.bits.typ)
        when(io.mem_port.resp.valid){
            for(i <- 0 until 16)
                printf("burst data %d: %x\n", UInt(i),burst_data(i))
            
            printf("offset:%x ,read data ori: %x\n",word_idx_in_burst, read_data_ori)
        }
        
        // Wiring
        
        io.mem_port.req.valid <> io.core_port.req.valid
        io.mem_port.req.ready <> io.core_port.req.ready
        io.mem_port.req.bits.addr <> io.core_port.req.bits.addr
        io.mem_port.req.bits.data <> io.core_port.req.bits.data
        io.mem_port.req.bits.fcn <> io.core_port.req.bits.fcn
        io.mem_port.req.bits.typ <> io.core_port.req.bits.typ
        
        io.core_port.resp.valid <> io.mem_port.resp.valid
        io.core_port.resp.bits.data := read_data_ori
        io.core_port.resp.bits.burst_data := Bits(0)

        val DCACHE_ENTRIES = 8
        val DCACHE_ENTRIES_BIT = 3
        val DCACHE_TAG_BIT = conf.xprlen-DCACHE_ENTRIES_BIT-burst_len_bit
        val DCACHE_BITS = 1+DCACHE_TAG_BIT+burst_len*8
        //valid bit + tag + data bit

        val dcache = Mem(Bits(width=DCACHE_BITS), DCACHE_ENTRIES)
        val dcache_addr = UInt(width=DCACHE_ENTRIES_BIT)
        val dcache_write_data = UInt(width=DCACHE_BITS)
        val dcache_read_entry = dcache(dcache_addr)
        val dcache_read_burst = Vec.fill(16){Bits(width=conf.xprlen)}
        val dcache_read_data = Bits(width=conf.xprlen)

        val tag = req_addr(conf.xprlen-1,conf.xprlen-DCACHE_TAG_BIT)
        val index = 
      req_addr(conf.xprlen-DCACHE_TAG_BIT-1,conf.xprlen-DCACHE_TAG_BIT-DCACHE_ENTRIES_BIT)
        val word_offset = req_addr(5,2)
        val byte_offset = req_addr(1,0)

        val word_data = Bits() 
        val read_data = Bits()

        dcache_addr := index
       
        word_data := Mux1H(UIntToOH(word_offset, width=(burst_len / word_len)),dcache_read_burst)
        read_data := LoadDataGen(word_data >> (byte_offset << 3), req_typ)

         //print cache table
         val dcache_read_entry0 = dcache(0)
         val dcache_read_entry1 = dcache(1)
         val dcache_read_entry2 = dcache(2)
         val dcache_read_entry3 = dcache(3)
         val dcache_read_entry4 = dcache(4)
         val dcache_read_entry5 = dcache(5)
         val dcache_read_entry6 = dcache(6)
         val dcache_read_entry7 = dcache(7)

         when ( io.core_port.req.bits.fcn === M_XWR ){
         printf("0 %x\n",dcache_read_entry0)
         printf("1 %x\n",dcache_read_entry1)
         printf("2 %x\n",dcache_read_entry2)
         printf("3 %x\n",dcache_read_entry3)
         printf("4 %x\n",dcache_read_entry4)
         printf("5 %x\n",dcache_read_entry5)
         printf("6 %x\n",dcache_read_entry6)
         printf("7 %x\n",dcache_read_entry7)
         }

         dcache_write_data := Bits(0,DCACHE_BITS)
       
         when(io.mem_port.resp.valid){
         val wdata = StoreDataGen(req_data, req_typ) 
         val byte_shift_amt = req_addr(1, 0)
         val bit_shift_amt  = Cat(byte_shift_amt, UInt(0,3))
         val wmask = (StoreMask(req_typ) << bit_shift_amt)(31,0)
         val write_mask = Fill(32,UInt(0x1)) << UInt(word_offset<<5)
         val write_data_gen = wdata << UInt(word_offset<<5)
         printf("write mask: %x \nreq_data:%x ,wdata:%x\n", write_mask ,req_data,wdata)
         for(i <- 0 until 8)
            dcache.write(UInt(i), write_data_gen, write_mask)
         }

    }


    type DCache = NoDCache2

    //appropriately mask and sign-extend data for the core                  
    object LoadDataGen                                                      
    {                                                                       
       def apply(data: Bits, typ: Bits) : Bits =                            
       {                                                                    
          val out = Mux(typ === MT_H,  Cat(Fill(16, data(15)),  data(15,0)),
                    Mux(typ === MT_HU, Cat(Fill(16, UInt(0x0)), data(15,0)),
                    Mux(typ === MT_B,  Cat(Fill(24, data(7)),    data(7,0)),
                    Mux(typ === MT_BU, Cat(Fill(24, UInt(0x0)), data(7,0)), 
                                        data(31,0)))))                      
                                                                            
          return out                                                        
       }                                                                    
    }
}
